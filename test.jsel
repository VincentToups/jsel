(def x 10)
(def y 11)

(def (< a b)
	 (literally "a<b"))

(def (> a b)
	 (literally "a>b"))

(def (+-primitive a b)
	 (literally "a+b"))

(def (+)
	 (let ((result 0)
		   (arg-array ((.. [] slice apply) arguments)))
	   (for ((index element) :in arg-array)
			(setq result (+-primitive result element)))
	   result))

(+ 1 2 3 4 5)

(def z 
	 (let ((x 10))
	   (setq x 11)
	   x))
(def r (let ((a [ 1 2 3 4])
			 (o 0))
		 (for ((index element) :in a)
			  (setq o (+-primitive o element)))
		 o))

(def-primitive-module test-module 
  (def-external a 10)
  (def-external b 10)
  (def-external (+b x)
	(+ x b))
  (defmacro-external progn (&body body)
	`(let () 
	   ,@body)))

(defmacro progn2 (&body body)
  `(let () ,@body))

(test-module.+b 100)
(test-module.progn (console.log "Hello Nurse!") (hello) (nurse))
(progn2 (console.log "Hello Nurse!"))

(let () (console.log "HN2"))
